`docker run -d -p 6379:6379 --name myredis -v /usr/local/docker/redis/redis.conf:/etc/redis/redis.conf -v /usr/local/docker/redis/data:/data redis redis-server /usr/local/docker/redis/redis.conf`
```
data  Dockerfile  redis.conf
[root@192 redis]# cat Dockerfile
FROM redis
COPY redis.conf /usr/local/docker/redis/redis.conf
CMD [ "redis-server", "/usr/local/docker/redis/redis.conf" ]

docker build --pull --rm --tag myredisimage:v1 -f ./Dockerfile .

[root@192 redis]# docker build --pull --rm --tag my_redis_image:v1 .
	Sending build context to Docker daemon  97.28kB
	Step 1/3 : FROM redis
	latest: Pulling from library/redis
	Digest: sha256:394dc1b4287dd99ca928af9a4d4892feed7e5563be424e4676a69bc6e5aa0ab4
	Status: Image is up to date for redis:latest
	 ---> 87c26977fd90
	Step 2/3 : COPY redis.conf /usr/local/docker/redis/redis.conf
	 ---> dc5015a85fe6
	Step 3/3 : CMD [ "redis-server", "/usr/local/docker/redis/redis.conf" ]
	 ---> Running in a207b9643aec
	Removing intermediate container a207b9643aec
	 ---> e8b77a9ace42
	Successfully built e8b77a9ace42
	Successfully tagged my_redis_image:v1
	
docker run -d -p 6379:6379 --name myredis -v /usr/local/docker/redis/data:/data my_redis_image:v1

```

## elasticsearch

`docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:tag`



elasticsearch@4c5e5239674a:~/config$ pwd
/usr/share/elasticsearch/config
elasticsearch@4c5e5239674a:~/config$ ls
certs                              elasticsearch.keystore  jvm.options    log4j2.file.properties  role_mapping.yml  users
elasticsearch-plugins.example.yml  elasticsearch.yml       jvm.options.d  log4j2.properties       roles.yml         users_roles
elasticsearch@4c5e5239674a:~/config$


## mysql修改密码

`mysqladmin -uroot -p旧密码 password 新密码`
会提示：不过没有影响
> mysqladmin: [Warning] Using a password on the command line interface can be insecure.  
> Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.  



## 安装docker-compose
1、运行以下命令下载 Docker Compose 的当前稳定版本：
`sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose`
curl -L "https://github.com/docker/compose/releases/download/v2.4.0/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
2、对二进制文件应用可执行权限：
`sudo chmod +x /usr/local/bin/docker-compose`


3、如果安装后命令docker-compose失败，请检查您的路径。您还可以/usr/bin在路径中创建指向或任何其他目录的符号链接。
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

4、测试安装。
docker-compose --version

5、编写compose文件
`touch docker-compose.yml`
```
version: "3.9"
volumes:
  data:
  config:
  plugin:
networks:
  es:
services:
  elasticsearch:
    image: elasticsearch:8.1.1
#	container_name: myes
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - "es"
    environment:
      - "discovery.type=single-node"
    volumes:
      - data:/usr/share/elasticsearch/data
      - config:/usr/share/elasticsearch/config
      - plugin:/usr/share/elasticsearch/plugins

  kibana:
    image: kibana:8.1.1
#	container_name: mykibana
    ports:
      - "5601:5601"
    networks:
      - "es"
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml

  redis:
    image: redis:latest
#	container_name: myredis
#	restart: "no"
    ports:
      - "6379:6379"
    networks:
      - "es"
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
      - ./redis_data:/data
    command: redis-server /etc/redis/redis.conf
    privileged: true
```
kibana.yml内容如下：
```
server.host: "0"
server.shutdownTimeout: "5s" 
elasticsearch.hosts: [ "http://elasticsearch:9200" ]
monitoring.ui.container.elasticsearch.enabled: true
```
compose文件属性：
```
image: 指定容器启动的镜像
build: 服务除了可以基于指定的镜像
command: 使用 command 可以覆盖容器启动后默认执行的命令
**container_name**: 指定运行时容器名称，而不使用默认格式（<项目名称><服务名称><序号>）
**restart**:重启策略
**depends_on**: 指明服务之间依赖，解决了容器的依赖、启动先后的问题
dns: 指定 DNS 服务器。
tmpfs: 挂载临时目录到容器内部，与 run 的参数一样
entrypoint: 在 Dockerfile 中有一个指令叫做 ENTRYPOINT 指令
env_file: 专门存放变量的文件。如果通过 docker-compose -f FILE 指定了配置文件，则 env_file 中路径会使用配置文件路径。如果有变量名称与 environment 指令冲突，则以后者为准
environment: 与上面的 env_file 设置镜像变量，它可以保存变量到镜像里面，也就是说启动的容器也会包含这些变量设置
expose: 这个标签与 Dockerfile 中的 EXPOSE 指令一样，用于指定暴露的端口
external_links:让 Compose 项目里面的容器连接到那些项目配置外部的容器
extra_hosts: 添加主机名的标签，就是往 /etc/hosts 文件中添加一些记录
labels: 向容器添加元数据，和 Dockerfile 的 LABEL 指令一个意思
**links**: 上面的 depends_on 标签解决的是启动顺序问题，这个标签解决的是容器连接问题，与 Docker client 的 –link 一样效果，会连接到其它服务中的容器。
logging: 用于配置日志服务。默认的 driver 是 json-file
pid: 将 PID 模式设置为主机 PID 模式，跟主机系统共享进程命名空间。容器使用这个标签将能够访问和操纵其他容器和宿主机的名称空间。
ports: 映射端口的标签。使用 HOST:CONTAINER 格式或者只是指定容器的端口，宿主机会随机映射端口。
security_opt: 为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签。
stop_signal: 设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。设置另一个信号可以使用 stop_signal 标签。
volumes: 挂载一个目录或者一个已存在的数据卷容器
cap_add, cap_drop: 添加或删除容器的内核功能
devices: 设备映射列表
extends: 这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置。
```


6、启动 
docker-compose up -d
或者 docker-compose up
```
启动
docker-compose up 

如果启动时指定-d标志，则以守护进程模式运行服务
docker-compose up -d

如果要批量启动服务（如启动 8 个 Scrapy），则在--scale选项指定服务的个数：
docker-compose up -d --scale spider=8

列出本地 docker-compose.yml 文件里定义的正在运行的所有服务
docker-compose ps

logs: 查看服务的日志，这个命令会追踪服务的日志文件，类似tail -f命令，使用Ctrl+C退出
docker-compose logs

stop: 停止所有服务，如果服务没有停止，可以使用docker-compose kill强制杀死服务
docker-compose stop

rm: 删除所有服务
docker-compose rm
```



第一次报错经验：
```
[root@192 docker]# docker-compose up
[+] Running 6/6
 ⠿ Network docker_es                 Created                                                                                                                                                              0.7s
 ⠿ Volume "docker_data"              Created                                                                                                                                                              0.1s
 ⠿ Volume "docker_config"            Created                                                                                                                                                              0.3s
 ⠿ Volume "docker_plugin"            Created                                                                                                                                                              0.2s
 ⠿ Container docker-elasticsearch-1  Created                                                                                                                                                              1.2s
 ⠿ Container docker-kibana-1         Created                                                                                                                                                              1.2s
Attaching to docker-elasticsearch-1, docker-kibana-1

docker-kibana-1         | [2022-04-01T16:29:14.534+00:00][FATAL][root] Error: [config validation of [server].host]: value must be a valid hostname (see RFC 1123).



